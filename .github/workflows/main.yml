on: [push, pull_request]

defaults:
  run:
    shell: bash

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
  AWS_ACCESS_KEY_ID: AKIAVBLKPL2ZW2T7TYFQ
  AWS_SECRET_ACCESS_KEY: ${{ secrets.NODE_PRE_GYP_SECRETACCESSKEY }}
  NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}

jobs:
  # linux-debug:
  #   name: Linux Debug
  #   runs-on: ubuntu-20.04

  #   env:
  #     CC: gcc-10
  #     CXX: g++-10
  #     TREAT_WARNINGS_AS_ERRORS: 1
  #     GEN: ninja

  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0

  #   - name: Install
  #     run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build

  #   - name: Build
  #     run: BUILD_ARROW_ABI_TEST=1 make debug

  #   - name: Test
  #     run: make unittestci

  # format-check:
  #   name: Format Check
  #   runs-on: ubuntu-20.04

  #   env:
  #     CC: gcc-10
  #     CXX: g++-10
  #     GEN: ninja

  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0

  #   - name: Install
  #     run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build clang-format && sudo pip3 install cmake-format

  #   - name: Format Check
  #     run: |
  #       clang-format --version
  #       clang-format --dump-config
  #       make format-check-silent

  # tidy-check:
  #   name: Tidy Check
  #   runs-on: ubuntu-20.04

  #   env:
  #     CC: gcc-10
  #     CXX: g++-10
  #     GEN: ninja
  #     TIDY_THREADS: 4

  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0

  #   - name: Install
  #     run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build clang-tidy && sudo pip3 install pybind11[global]

  #   - name: Tidy Check
  #     run: make tidy-check

  coverage:
    name: Coveralls
    runs-on: ubuntu-20.04
#    needs: linux-debug


    env:
      GEN: ninja

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install
      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build lcov

    - name: Coverage Reset
      run: |
        lcov --zerocounters --directory .
        lcov --capture --initial --directory . --base-directory . --no-external --output-file coverage.info

    - name: Build
      run: |
        mkdir -p build/coverage
        (cd build/coverage && cmake -E env CXXFLAGS="--coverage" cmake -DCMAKE_BUILD_TYPE=Debug ../.. && make)
        build/coverage/test/unittest

    - name: Generate Coverage
      run: |
        lcov --directory . --base-directory . --no-external --capture --output-file coverage.info
        lcov --remove coverage.info '/usr*' '*/cl.hpp' 'tools/*' 'benchmark/*' 'examples/*' 'third_party/*' 'test/*' -o lcov.info

    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        path-to-lcov: ./lcov.info


#   win-release-64:
#     name: Windows (64 Bit)
#     runs-on: windows-latest
#     needs: linux-debug

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - name: Build
#       run: |
#         python scripts/windows_ci.py
#         cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=x64 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_TPCH_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DBUILD_REST=1 -DJDBC_DRIVER=1
#         cmake --build . --config Release

#     - name: Test
#       run: test/Release/unittest.exe

#     - name: Tools Test
#       run: |
#         python tools/shell/shell-test.py Release/duckdb.exe
#         java -cp tools/jdbc/duckdb_jdbc.jar org.duckdb.test.TestDuckDBJDBC

#     - name: Deploy
#       run: |
#         python scripts/amalgamation.py
#         choco install zip -y --force
#         zip -j duckdb_cli-windows-amd64.zip Release/duckdb.exe
#         zip -j libduckdb-windows-amd64.zip src/Release/duckdb.dll src/amalgamation/duckdb.hpp src/include/duckdb.h
#         python scripts/asset-upload-gha.py libduckdb-windows-amd64.zip duckdb_cli-windows-amd64.zip duckdb_jdbc-windows-amd64.jar=tools/jdbc/duckdb_jdbc.jar

#     - uses: actions/upload-artifact@v2
#       with:
#         name: duckdb-binaries-windows
#         path: |
#           libduckdb-windows-amd64.zip
#           duckdb_cli-windows-amd64.zip
#           tools/jdbc/duckdb_jdbc.jar

#     - uses: ilammy/msvc-dev-cmd@v1
#     - name: Duckdb.dll export symbols with C++ on Windows
#       run: cl -I src/include examples/embedded-c++-windows/cppintegration.cpp -link src/Release/duckdb.lib



#   win-release-32:
#     name: Windows (32 Bit)
#     runs-on: windows-latest
#     needs: linux-debug

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - name: Build
#       run: |
#         cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=Win32 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_TPCH_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DJDBC_DRIVER=1
#         cmake --build . --config Release

#     - name: Test
#       run: test/Release/unittest.exe

#     - name: Tools Test
#       run: |
#         python tools/shell/shell-test.py Release/duckdb.exe

#     - name: Deploy
#       run: |
#         python scripts/amalgamation.py
#         choco install zip -y --force
#         zip -j duckdb_cli-windows-i386.zip Release/duckdb.exe
#         zip -j libduckdb-windows-i386.zip src/Release/duckdb.dll src/amalgamation/duckdb.hpp src/include/duckdb.h
#         python scripts/asset-upload-gha.py libduckdb-windows-i386.zip duckdb_cli-windows-i386.zip duckdb_jdbc-windows-i386.jar=tools/jdbc/duckdb_jdbc.jar

#     - uses: actions/upload-artifact@v2
#       with:
#         name: duckdb-binaries-windows
#         path: |
#           libduckdb-windows-i386.zip
#           duckdb_cli-windows-i386.zip
#           tools/jdbc/duckdb_jdbc.jar


#   xcode-release:
#     name: OSX Release
#     runs-on: macos-latest
#     needs: linux-debug

#     env:
#       BUILD_ICU: 1
#       BUILD_TPCH: 1
#       BUILD_FTS: 1
#       BUILD_REST: 1
#       BUILD_JDBC: 1
#       BUILD_HTTPFS: 1
#       OPENSSL_ROOT_DIR: /usr/local/opt/openssl/


#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - name: Build
#       run: make

#     - name: Unit Test
#       run: make allunit

#     - name: Tools Tests
#       run: |
#         python tools/shell/shell-test.py build/release/duckdb
#         java -cp build/release/tools/jdbc/duckdb_jdbc.jar org.duckdb.test.TestDuckDBJDBC

#     - name: Examples
#       run: |
#         (cd examples/embedded-c; make)
#         (cd examples/embedded-c++; make)
#         (cd examples/jdbc; make; make maven)

#     - name: Deploy
#       run: |
#         python scripts/amalgamation.py
#         zip -j duckdb_cli-osx-amd64.zip build/release/duckdb
#         zip -j libduckdb-osx-amd64.zip build/release/src/libduckdb*.dylib src/amalgamation/duckdb.hpp src/include/duckdb.h
#         python scripts/asset-upload-gha.py libduckdb-osx-amd64.zip duckdb_cli-osx-amd64.zip duckdb_jdbc-osx-amd64.jar=build/release/tools/jdbc/duckdb_jdbc.jar

#     - uses: actions/upload-artifact@v2
#       with:
#         name: duckdb-binaries-osx
#         path: |
#           libduckdb-osx-amd64.zip
#           duckdb_cli-osx-amd64.zip
#           build/release/tools/jdbc/duckdb_jdbc.jar


#   xcode-debug:
#     name: OSX Debug
#     runs-on: macos-latest
#     needs: linux-debug

#     env:
#       TREAT_WARNINGS_AS_ERRORS: 1

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - name: Build
#       run: BUILD_ARROW_ABI_TEST=1 make debug

#     - name: Test
#       run: make unittestci

#     - name: Amalgamation
#       run: |
#         python scripts/amalgamation.py --extended
#         python scripts/parquet_amalgamation.py
#         cd src/amalgamation
#         clang++ -std=c++11 -emit-llvm -S duckdb.cpp parquet-amalgamation.cpp


#   linux-release-64:
#     name: Linux (64 Bit)
#     runs-on: ubuntu-16.04
#     needs: linux-debug

#     env:
#       GEN: ninja
#       BUILD_BENCHMARK: 1
#       BUILD_ICU: 1
#       BUILD_TPCH: 1
#       BUILD_FTS: 1
#       BUILD_REST: 1
#       BUILD_JDBC: 1
#       BUILD_HTTPFS: 1

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - name: Install
#       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build

#     - name: Build
#       run: STATIC_LIBCPP=1 make

#     - name: Test
#       run: make allunit

#     - name: Symbol Leakage Test
#       run: python scripts/exported_symbols_check.py build/release/src/libduckdb*.so

#     - name: Tools Tests
#       run: |
#         python tools/shell/shell-test.py build/release/duckdb
#         pip install requests
#         python tools/rest/test_the_rest.py build/release/tools/rest
#         java -cp build/release/tools/jdbc/duckdb_jdbc.jar org.duckdb.test.TestDuckDBJDBC

#     - name: Examples
#       run: |
#         (cd examples/embedded-c; make)
#         (cd examples/embedded-c++; make)
#         (cd examples/jdbc; make; make maven)
#         build/release/benchmark/benchmark_runner benchmark/tpch/sf1/q01.benchmark

#     - name: Deploy
#       run: |
#         python scripts/amalgamation.py
#         zip -j duckdb_cli-linux-amd64.zip build/release/duckdb
#         zip -j libduckdb-linux-amd64.zip build/release/src/libduckdb*.so src/amalgamation/duckdb.hpp src/include/duckdb.h
#         zip -j libduckdb-src.zip src/amalgamation/duckdb.hpp src/amalgamation/duckdb.cpp src/include/duckdb.h
#         zip -j duckdb_rest-linux-amd64.zip build/release/tools/rest/duckdb_rest_server
#         python scripts/asset-upload-gha.py libduckdb-src.zip libduckdb-linux-amd64.zip duckdb_cli-linux-amd64.zip duckdb_rest-linux-amd64.zip duckdb_jdbc-linux-amd64.jar=build/release/tools/jdbc/duckdb_jdbc.jar

#     - uses: actions/upload-artifact@v2
#       with:
#         name: duckdb-binaries-linux
#         path: |
#           libduckdb-linux-amd64.zip
#           duckdb_cli-linux-amd64.zip
#           build/release/tools/jdbc/duckdb_jdbc.jar



#   linux-release-32:
#     name: Linux (32 Bit)
#     runs-on: ubuntu-16.04
#     needs: linux-debug

#     env:
#       GEN: ninja

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - name: Install
#       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build libc6-dev-i386 gcc-multilib g++-multilib lib32readline6-dev

#     - name: Build
#       run: |
#         mkdir -p build/release
#         (cd build/release && cmake -DSTATIC_LIBCPP=1 -DJDBC_DRIVER=1 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DFORCE_32_BIT=1 -DCMAKE_BUILD_TYPE=Release ../.. && cmake --build .)

#     - name: Test
#       run: build/release/test/unittest "*"

#     - name: Deploy
#       run: |
#         python scripts/amalgamation.py
#         zip -j duckdb_cli-linux-i386.zip build/release/duckdb
#         zip -j libduckdb-linux-i386.zip build/release/src/libduckdb*.so src/amalgamation/duckdb.hpp src/include/duckdb.h
#         python scripts/asset-upload-gha.py libduckdb-linux-i386.zip duckdb_cli-linux-i386.zip duckdb_jdbc-linux-i386.jar=build/release/tools/jdbc/duckdb_jdbc.jar

#     - uses: actions/upload-artifact@v2
#       with:
#         name: duckdb-binaries-linux
#         path: |
#           libduckdb-linux-i386.zip
#           duckdb_cli-linux-i386.zip
#           build/release/tools/jdbc/duckdb_jdbc.jar


#   linux-rpi:
#     name: Linux (Raspberry Pi)
#     runs-on: ubuntu-20.04
#     needs: linux-debug

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - name: Install
#       run: |
#         sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#         git clone https://github.com/raspberrypi/tools --depth=1 rpi-tools

#     - name: Build
#       run: |
#         export TOOLCHAIN=`pwd`/rpi-tools
#         mkdir -p build/release
#         cd build/release
#         cmake -G Ninja -DBUILD_TPCH_EXTENSION=1 -DDUCKDB_RPI_TOOLCHAIN_PREFIX=$TOOLCHAIN -DBUILD_UNITTESTS=0 -DCMAKE_TOOLCHAIN_FILE=../../scripts/raspberry-pi-cmake-toolchain.cmake ../../
#         cmake --build .
#         file duckdb

#     - name: Deploy
#       run: |
#         python scripts/amalgamation.py
#         zip -j duckdb_cli-linux-rpi.zip build/release/duckdb
#         zip -j libduckdb-linux-rpi.zip build/release/src/libduckdb*.so src/amalgamation/duckdb.hpp src/include/duckdb.h
#         python scripts/asset-upload-gha.py libduckdb-linux-rpi.zip duckdb_cli-linux-rpi.zip

#     - uses: actions/upload-artifact@v2
#       with:
#         name: duckdb-binaries-rpi
#         path: |
#           libduckdb-linux-rpi.zip
#           duckdb_cli-linux-rpi.zip


#   old-gcc:
#     name: GCC 4.8
#     runs-on: ubuntu-18.04
#     needs: linux-debug

#     env:
#       CC: gcc-4.8
#       CXX: g++-4.8

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - name: Install
#       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq g++-4.8 binutils

#     - name: Build
#       run: make release

#     - name: Test
#       run: make allunit


#   centos:
#     name: CentOS 7
#     runs-on: ubuntu-latest
#     container: centos:7
#     needs: linux-debug

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - name: Install
#       run: yum install -y gcc gcc-c++ git cmake make

#     - name: Build
#       run: make release

#     - name: Test
#       run: ./build/release/test/unittest


#   release-assert:
#     name: Release Assertions
#     runs-on: ubuntu-20.04
#     needs: linux-debug

#     env:
#       CC: gcc-10
#       CXX: g++-10
#       GEN: ninja
#       BUILD_ICU: 1
#       BUILD_TPCH: 1
#       BUILD_FTS: 1

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - name: Install
#       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build

#     - name: Build
#       run: make relassert

#     - name: Test
#       run: build/relassert/test/unittest "*"


#   threadsan:
#     name: Thread Sanitizer
#     runs-on: ubuntu-20.04
#     needs: linux-debug

#     env:
#       CC: gcc-10
#       CXX: g++-10
#       GEN: ninja
#       BUILD_ICU: 1
#       BUILD_TPCH: 1
#       BUILD_FTS: 1
#       TSAN_OPTIONS: suppressions=.sanitizer-thread-suppressions.txt

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - name: Install
#       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build

#     - name: Build
#       run: THREADSAN=1 make reldebug

#     - name: Test
#       run: |
#           build/reldebug/test/unittest --end-offset-percentage=10
#           build/reldebug/test/unittest --start-offset-percentage=10 --end-offset-percentage=20
#           build/reldebug/test/unittest --start-offset-percentage=20 --end-offset-percentage=30
#           build/reldebug/test/unittest --start-offset-percentage=30 --end-offset-percentage=40
#           build/reldebug/test/unittest --start-offset-percentage=40 --end-offset-percentage=50
#           build/reldebug/test/unittest --start-offset-percentage=50 --end-offset-percentage=60
#           build/reldebug/test/unittest --start-offset-percentage=60 --end-offset-percentage=70
#           build/reldebug/test/unittest --start-offset-percentage=70 --end-offset-percentage=80
#           build/reldebug/test/unittest --start-offset-percentage=80 --end-offset-percentage=90
#           build/reldebug/test/unittest --start-offset-percentage=90

#   valgrind:
#     name: Valgrind
#     runs-on: ubuntu-20.04
#     needs: linux-debug

#     env:
#       CC: gcc-10
#       CXX: g++-10
#       DISABLE_SANITIZER: 1
#       GEN: ninja

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - name: Install
#       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build valgrind

#     - name: Build
#       run: make debug

#     - name: Test
#       run: valgrind ./build/debug/test/unittest -s "Test TPC-H SF0.01"

# # borked somehow. needs investigation.
# #  codecov:
# #    name: Code Coverage
# #    runs-on: ubuntu-20.04
# #    needs: linux-debug
# #
# #    env:
# #      GEN: ninja
# #
# #    steps:
# #    - uses: actions/checkout@v2
# #
# #    - uses: actions/setup-python@v2
# #      with:
# #        python-version: '3.7'
# #
# #    - name: Install
# #      run: pip install --user cpp-coveralls
# #
# #
# #    - name: Coverage
# #      run: |
# #        mkdir -p build/coverage
# #        (cd build/coverage && cmake -E env CXXFLAGS="--coverage" cmake -DCMAKE_BUILD_TYPE=Debug ../.. && make)
# #        build/coverage/test/unittest
# #        ~/.local/bin/coveralls -b build/coverage --exclude-pattern '.*CMake.*' --exclude tools --exclude benchmark --exclude examples --exclude third_party --exclude test --exclude src/common/enums --exclude src/parser/transform/helpers/nodetype_to_string.cpp --exclude build/coverage/third_party/libpg_query --exclude build/coverage/third_party/libpg_query/grammar --gcov-options '\-lp' > /dev/null


#   vector-sizes:
#     name: Vector Sizes
#     runs-on: ubuntu-20.04
#     needs: linux-debug

#     env:
#       CC: gcc-10
#       CXX: g++-10

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - name: Test
#       run: python scripts/test_vector_sizes.py


#   sqllogic:
#     name: Sqllogic tests
#     runs-on: ubuntu-20.04
#     needs: linux-debug

#     env:
#       CC: gcc-10
#       CXX: g++-10

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - name: Test
#       run: make sqlite


#   expanded:
#     name: Expanded
#     runs-on: ubuntu-20.04
#     needs: linux-debug

#     env:
#       CC: gcc-10
#       CXX: g++-10
#       TREAT_WARNINGS_AS_ERRORS: 1
#       DISABLE_UNITY: 1
#       GEN: ninja

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - name: Install
#       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build

#     - name: Build
#       run: make debug


#   sqlancer:
#     name: SQLancer
#     runs-on: ubuntu-20.04
#     needs: linux-debug

#     env:
#       BUILD_JDBC: 1
#       GEN: ninja

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - name: Install
#       run: |
#         sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#         git clone https://github.com/hannesmuehleisen/sqlancer
#         cd sqlancer
#         git checkout persistent
#         mvn package -q -DskipTests

#     - name: Build
#       run: make reldebug

#     - name: Test
#       run: |
#         cp build/reldebug/tools/jdbc/duckdb_jdbc.jar sqlancer/target/lib/duckdb_jdbc-*.jar
#         python3 scripts/run_sqlancer.py


#   sqlancer_persistent:
#     name: SQLancer (Persistent)
#     runs-on: ubuntu-20.04
#     needs: linux-debug

#     env:
#       BUILD_JDBC: 1
#       GEN: ninja

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - name: Install
#       run: |
#         sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#         git clone https://github.com/hannesmuehleisen/sqlancer
#         cd sqlancer
#         git checkout persistent
#         mvn package -q -DskipTests

#     - name: Build
#       run: make reldebug

#     - name: Test
#       run: |
#         cp build/reldebug/tools/jdbc/duckdb_jdbc.jar sqlancer/target/lib/duckdb_jdbc-*.jar
#         python3 scripts/run_sqlancer.py --persistent


#   jdbc:
#     name: JDBC Compliance
#     runs-on: ubuntu-18.04
#     needs: linux-debug

#     env:
#       CC: gcc-10
#       CXX: g++-10
#       BUILD_JDBC: 1
#       GEN: ninja

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - name: Install
#       run: |
#         sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
#         git clone https://github.com/cwida/jdbccts.git

#     - name: Build
#       run: make release

#     - name: Test
#       run: (cd jdbccts && make DUCKDB_JAR=../build/release/tools/jdbc/duckdb_jdbc.jar test)

#   linux-python3:
#     name: Python 3 Linux
#     runs-on: ubuntu-20.04
#     needs: linux-debug

#     env:
#       CIBW_BUILD: 'cp36-* cp37-* cp38-* cp39-*'
#       CIBW_BEFORE_BUILD: 'pip install --prefer-binary "pandas>=0.24" "pytest>=4.3"'
#       CIBW_TEST_REQUIRES: 'pytest'
#       CIBW_BEFORE_TEST: 'pip install --prefer-binary "pandas>=0.24" && (pip install --prefer-binary "pyarrow>=3.0.0" || true)'
#       CIBW_TEST_COMMAND: 'python -m pytest {project}/tests'
#       SETUPTOOLS_SCM_NO_LOCAL: 'yes'
#       TWINE_USERNAME: 'hfmuehleisen'

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - name: Install
#       run: pip install cibuildwheel twine

#     - name: Build
#       run: |
#         cd tools/pythonpkg
#         python setup.py sdist
#         mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
#         cibuildwheel --output-dir wheelhouse duckdb_tarball

#     - name: Deploy
#       run: |
#         python scripts/asset-upload-gha.py duckdb_python_src.tar.gz=tools/pythonpkg/dist/duckdb-*.tar.gz
#         if [[ "$GITHUB_REF" =~ ^(refs/heads/master|refs/tags/v.+)$ ]] ; then
#           twine upload --non-interactive --disable-progress-bar --skip-existing tools/pythonpkg/wheelhouse/*.whl tools/pythonpkg/dist/duckdb-*.tar.gz
#         fi


#   linux-python2:
#     name: Python 2 Linux
#     runs-on: ubuntu-20.04
#     needs: linux-debug

#     env:
#       CIBW_BUILD: 'cp27-*'
#       CIBW_BEFORE_BUILD: 'pip install --prefer-binary "pandas>=0.24" "pytest>=4.3"'
#       CIBW_TEST_REQUIRES: 'pytest'
#       CIBW_BEFORE_TEST: 'pip install --prefer-binary "pandas>=0.24" '
#       CIBW_TEST_COMMAND: 'python -m pytest {project}/tests'
#       SETUPTOOLS_SCM_NO_LOCAL: 'yes'
#       TWINE_USERNAME: 'hfmuehleisen'

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - name: Install
#       run: pip install cibuildwheel twine

#     - name: Build
#       run: |
#         cd tools/pythonpkg
#         python setup.py sdist
#         mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
#         cibuildwheel --output-dir wheelhouse duckdb_tarball


#   osx-python3:
#     name: Python 3 OSX
#     runs-on: macos-latest
#     needs: linux-debug

#     env:
#       CIBW_BUILD: 'cp36-* cp37-* cp38-* cp39-*'
#       CIBW_BEFORE_BUILD: 'pip install --prefer-binary "pandas>=0.24" "pytest>=4.3"'
#       CIBW_TEST_REQUIRES: 'pytest'
#       CIBW_BEFORE_TEST: 'pip install --prefer-binary "pandas>=0.24" "pyarrow>=3.0.0"'
#       CIBW_TEST_COMMAND: 'python -m pytest {project}/tests'
#       CIBW_ARCHS_MACOS: 'x86_64 universal2 arm64'
#       SETUPTOOLS_SCM_NO_LOCAL: 'yes'
#       TWINE_USERNAME: 'hfmuehleisen'

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - name: Install
#       run: pip install cibuildwheel twine

#     - name: Build
#       run: |
#         cd tools/pythonpkg
#         python setup.py sdist
#         mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
#         cibuildwheel --output-dir wheelhouse duckdb_tarball

#     - name: Deploy
#       run: |
#         if [[ "$GITHUB_REF" =~ ^(refs/heads/master|refs/tags/v.+)$ ]] ; then
#           twine upload --non-interactive --disable-progress-bar --skip-existing tools/pythonpkg/wheelhouse/*.whl
#         fi

#   win-python3:
#     name: Python 3 Windows
#     runs-on: windows-latest
#     needs: linux-debug

#     env:
#       CIBW_BUILD: 'cp36-* cp37-* cp38-* cp39-*'
#       CIBW_BEFORE_BUILD: 'pip install --prefer-binary "pandas>=0.24" "pytest>=4.3"'
#       CIBW_TEST_REQUIRES: 'pytest'
#       CIBW_BEFORE_TEST: 'pip install --prefer-binary "pandas>=0.24" '
#       CIBW_TEST_COMMAND: 'python -m pytest {project}/tests'
#       SETUPTOOLS_SCM_NO_LOCAL: 'yes'
#       TWINE_USERNAME: 'hfmuehleisen'

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - name: Install
#       run: pip install cibuildwheel twine

#     - name: Build
#       run: |
#         cd tools/pythonpkg
#         python setup.py sdist
#         mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
#         cibuildwheel --output-dir wheelhouse duckdb_tarball

#     - name: Deploy
#       run: |
#         if [[ "$GITHUB_REF" =~ ^(refs/heads/master|refs/tags/v.+)$ ]] ; then
#           twine upload --non-interactive --disable-progress-bar --skip-existing tools/pythonpkg/wheelhouse/*.whl
#         fi


#   rstats-linux:
#     name: R Package Linux
#     runs-on: ubuntu-20.04
#     needs: linux-debug

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - uses: r-lib/actions/setup-r@v1
#       with:
#         r-version: 'devel'

#     - name: Install
#       run: |
#         sudo apt-get update -y -qq && sudo apt-get install -y -qq texlive-latex-base texlive-fonts-extra libcurl4-openssl-dev
#         mkdir -p $HOME/.R
#         R -f tools/rpkg/dependencies.R

#     - name: Build
#       run: |
#         cd tools/rpkg
#         ./configure
#         R CMD build .
#         R CMD INSTALL duckdb_*.tar.gz
#         (cd tests && R -f testthat.R)
#         R CMD check --as-cran -o /tmp duckdb_*.tar.gz
#         if grep WARNING /tmp/duckdb.Rcheck/00check.log ; then exit 1; fi

#     - name: Deploy
#       run: python scripts/asset-upload-gha.py duckdb_r_src.tar.gz=tools/rpkg/duckdb_*.tar.gz


#   rstats-windows:
#     name: R Package Windows
#     runs-on: windows-latest
#     needs: linux-debug

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - uses: r-lib/actions/setup-r@v1
#       with:
#         r-version: 'devel'

#     - name: Install
#       run: |
#         R -f tools/rpkg/dependencies.R

#     - name: Build
#       run: |
#         cd tools/rpkg
#         ./configure
#         R CMD build .
#         R CMD INSTALL duckdb_*.tar.gz
#         (cd tests && R -f testthat.R)
#         R CMD check --as-cran --no-manual -o /tmp duckdb_*.tar.gz
#         if grep WARNING /tmp/duckdb.Rcheck/00check.log ; then exit 1; fi


#   linux-tarball:
#     name: Python 3 Tarball
#     runs-on: ubuntu-20.04
#     needs: linux-debug

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - uses: actions/setup-python@v2
#       with:
#         python-version: '3.7'

#     - name: Install
#       run: pip install numpy

#     - name: Build
#       run: |
#         git archive --format zip --output test-tarball.zip HEAD
#         mkdir duckdb-test-tarball
#         mv test-tarball.zip duckdb-test-tarball
#         cd duckdb-test-tarball
#         unzip test-tarball.zip
#         cd tools/pythonpkg
#         export SETUPTOOLS_SCM_PRETEND_VERSION=0.2.2
#         python3 setup.py install --user

#   linux-nodejs:
#     name: node.js Linux
#     runs-on: ubuntu-20.04
#     needs: linux-debug


#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - name: Setup
#       run: ./scripts/node_version.sh upload

#     - name: Node 10
#       run: ./scripts/node_build.sh 10

#     - name: Node 12
#       run: ./scripts/node_build.sh 12

#     - name: Node 14
#       run: ./scripts/node_build.sh 14

#     - name: Node 15
#       run: ./scripts/node_build.sh 15


#   osx-nodejs:
#     name: node.js OSX
#     runs-on: macos-latest
#     needs: linux-debug

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - name: Setup
#       run: ./scripts/node_version.sh

#     - name: Node 10
#       run: ./scripts/node_build.sh 10

#     - name: Node 12
#       run: ./scripts/node_build.sh 12

#     - name: Node 14
#       run: ./scripts/node_build.sh 14

#     - name: Node 15
#       run: ./scripts/node_build.sh 15

#   linux-wasm-release:
#     name: WebAssembly Release
#     runs-on: ubuntu-20.04
#     needs: linux-debug

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0

#     - name: Build Amalgamation
#       run: python scripts/amalgamation.py

#     - name: Setup
#       run: ./scripts/wasm_configure.sh

#     - name: Build Library Module
#       run: ./scripts/wasm_build_lib.sh Release

#     - name: Build Test Module
#       run: ./scripts/wasm_build_test.sh Release

#     - name: Test WASM Module
#       run: node ./test/wasm/hello_wasm_test.js

#     - name: Package
#       run: |
#         zip -j duckdb-wasm32-nothreads.zip ./.wasm/build/duckdb.wasm
#         python scripts/asset-upload-gha.py duckdb-wasm32-nothreads.zip

#     - uses: actions/upload-artifact@v2
#       with:
#         name: duckdb-wasm32-nothreads
#         path: |
#           duckdb-wasm32-nothreads.zip
